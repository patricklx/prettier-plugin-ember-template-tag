// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`config > templateExportDefault: true > it formats ../cases/gjs/complex.gjs 1`] = `
"import { on } from \\"@ember/modifier\\";
import { service } from \\"@ember/service\\";
import Component from \\"@glimmer/component\\";

import { task } from \\"ember-concurrency\\";
import perform from \\"ember-concurrency/helpers/perform\\";

import Button from \\"okapi/components/button\\";
import Icon from \\"okapi/components/icon\\";

export default class ProjectStatusComponent extends Component {
  <template>
    <Button
      data-test-project-status={{@project.id}}
      class=\\"Button--theme-action\\"
      {{on \\"click\\" (perform this.restartProject)}}
    >
      <Icon @type={{this.iconType}} @id={{this.iconId}} />
      {{@project.status}}{{if this.restartProject.isRunning \\"...\\"}}
    </Button>
  </template>

  @service server;

  private get iconType() {
    return \\"mini\\";
  }

  private get iconId() {
    switch (this.args.project.status) {
      case \\"starting\\":
      case \\"stopping\\":
        return \\"ellipsis-horizontal-circle\\";

      case \\"started\\":
        return \\"play-circle\\";
      case \\"stopped\\":
        return \\"stop-circle\\";
    }
  }

  restartProject = task({ drop: true }, async () => {
    await this.server.restartProject(this.args.project);
  });
}
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gjs/component-class.gjs 1`] = `
"import Component from \\"@glimmer/component\\";

/** It's a component */
class MyComponent extends Component {
  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
}
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `
"import Component from \\"@glimmer/component\\";

/** It's a component */
class MyComponent extends Component {
  get whatever() {}

  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
}
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gjs/component-class-with-template-literal.gjs 1`] = `
"import Component from \\"@glimmer/component\\";

/** It's a component */
class MyComponent extends Component {
  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>

  what = \`template literal that is not a template\`;
}
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gjs/default-export.gjs 1`] = `
"export default <template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gjs/invalid-template.gjs 1`] = `
"export default <template>
              {{#if oops}}
            </template>
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1;
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;

const What = <template>Hi</template>;
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1;

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gjs/one-line.gjs 1`] = `
"const Oneline = <template>Module variable template (one line).</template>;
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gjs/prettier-ignore/component-class.gjs 1`] = `
"import Component from \\"@glimmer/component\\";

/** It's a component */
class MyComponent extends Component {
  // prettier-ignore
  <template>


    <h1>   Class top level template. Class top level template. Class top level template. Class top level template. Class top level template. </h1>
  </template>
}
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gjs/prettier-ignore/component-class-with-template-literal.gjs 1`] = `
"import Component from \\"@glimmer/component\\";

/** It's a component */
class MyComponent extends Component {
  // prettier-ignore
  <template>


    <h1>   Class top level template. Class top level template. Class top level template. Class top level template. Class top level template. </h1>
  </template>

  what = \`template literal that is not a template\`;
}
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gjs/prettier-ignore/default-export.gjs 1`] = `
"// prettier-ignore
export default <template>     Explicit default export module top level component. Explicit default export module top level component. Explicit default export module top level component. Explicit default export module top level component. Explicit default export module top level component. </template>
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gjs/prettier-ignore/exported-mod-var.gjs 1`] = `
"// prettier-ignore
export const Exported = <template>       Exported variable template. Exported variable template.  Exported variable template.  Exported variable template.  Exported variable template. Exported variable template. Exported variable template. </template>
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gjs/prettier-ignore/js-only.gjs 1`] = `
"// prettier-ignore
const num = 1;
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gjs/prettier-ignore/multiple-declarations.gjs 1`] = `
"// prettier-ignore
const ModVar1 = <template>

  <h1>   Module variable template. Module variable template. Module variable template. Module variable template. Module variable template. Module variable template. Module variable template. Module variable template.   </h1>
</template>,
ModVar2 = <template>
  Second module variable template.
</template>,
    num = 1;

// prettier-ignore
const bool = false, ModVar3 =<template>

  <h1>   Module variable template. Module variable template. Module variable template. Module variable template. Module variable template. Module variable template. Module variable template. Module variable template.   </h1>
</template>,
ModVar4 = <template>
  Second module variable template.
</template>
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gjs/prettier-ignore/one-line.gjs 1`] = `
"// prettier-ignore
const Oneline = <template>      Module variable template (one line). </template>
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gjs/prettier-ignore/simple.gjs 1`] = `
"// prettier-ignore
<template>
              what
            </template>
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gjs/simple.gjs 1`] = `
"export default <template>
  what
</template>
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gts/complex.gts 1`] = `
"import { on } from \\"@ember/modifier\\";
import { service } from \\"@ember/service\\";
import Component from \\"@glimmer/component\\";

import { task } from \\"ember-concurrency\\";
import perform from \\"ember-concurrency/helpers/perform\\";

import Button from \\"okapi/components/button\\";
import Icon from \\"okapi/components/icon\\";
import Project, { ProjectStatus } from \\"okapi/models/project\\";
import ServerService from \\"okapi/services/server\\";

export interface ProjectStatusSig {
  Args: {
    project: Project;
  };
}

export default class ProjectStatusComponent extends Component<ProjectStatusSig> {
  <template>
    <Button
      data-test-project-status={{@project.id}}
      class=\\"Button--theme-action\\"
      {{on \\"click\\" (perform this.restartProject)}}
    >
      <Icon @type={{this.iconType}} @id={{this.iconId}} />
      {{@project.status}}{{if this.restartProject.isRunning \\"...\\"}}
    </Button>
  </template>

  @service private declare server: ServerService;

  private get iconType(): \\"mini\\" {
    return \\"mini\\";
  }

  private get iconId(): string {
    switch (this.args.project.status) {
      case ProjectStatus.Starting:

      case ProjectStatus.Stopping:
        return \\"ellipsis-horizontal-circle\\";
      case ProjectStatus.Started:
        return \\"play-circle\\";
      case ProjectStatus.Stopped:
        return \\"stop-circle\\";
    }
  }

  private restartProject = task({ drop: true }, async (): Promise<void> => {
    await this.server.restartProject(this.args.project);
  });
}
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gts/component-class.gts 1`] = `
"import Component from \\"@glimmer/component\\";

export interface Signature {
  Element: HTMLElement;
  Args: {
    myArg: string;
  };
  Yields: [];
}

/** It's a component */
class MyComponent extends Component<Signature> {
  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
}
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gts/component-class-with-template-literal.gts 1`] = `
"import Component from \\"@glimmer/component\\";

export interface Signature {
  Element: HTMLElement;
  Args: {
    myArg: string;
  };
  Yields: [];
}

/** It's a component */
class MyComponent extends Component<Signature> {
  <template>
    <h1 ...attributes>
      {{@myArg}}
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>

  what = \`template literal that is not a template\`;
}
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export default <template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1;
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1;

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1;

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gts/one-line.gts 1`] = `
"import type { TOC } from \\"@ember/component/template-only\\";

export interface Sig {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Oneline = <template>One line.</template> as TOC<Sig>;
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gts/prettier-ignore/component-class.gts 1`] = `
"import Component from \\"@glimmer/component\\";

export interface Signature {
  Element: HTMLElement;
  Args: {
    myArg: string;
  };
  Yields: [];
}

/** It's a component */
class MyComponent extends Component<Signature> {
  // prettier-ignore
  <template>


    <h1>   Class top level template. Class top level template. Class top level template. Class top level template. Class top level template. </h1>
  </template>
}
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gts/prettier-ignore/component-class-with-template-literal.gts 1`] = `
"import Component from \\"@glimmer/component\\";

export interface Signature {
  Element: HTMLElement;
  Args: {
    myArg: string;
  };
  Yields: [];
}

/** It's a component */
class MyComponent extends Component<Signature> {
  // prettier-ignore
  <template>


    <h1 ...attributes>   {{@myArg}} Class top level template. Class top level template. Class top level template. Class top level template. Class top level template. </h1>
  </template>

  what = \`template literal that is not a template\`;
}
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gts/prettier-ignore/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}
// prettier-ignore
export default <template>     Explicit default export module top level component. Explicit default export module top level component. Explicit default export module top level component. Explicit default export module top level component. Explicit default export module top level component. </template> as TemplateOnlyComponent<Signature>
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gts/prettier-ignore/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

// prettier-ignore
export const Exported: TemplateOnlyComponent<Signature>     = <template>       Exported variable template. Exported variable template.  Exported variable template.  Exported variable template.  Exported variable template. Exported variable template. Exported variable template. </template>
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gts/prettier-ignore/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

// prettier-ignore
export const Exported = <template>       Exported variable template. Exported variable template.  Exported variable template.  Exported variable template.  Exported variable template. Exported variable template. Exported variable template. </template> as TemplateOnlyComponent<Signature>
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gts/prettier-ignore/js-only.gts 1`] = `
"// prettier-ignore
const num:   number = 1;
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gts/prettier-ignore/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

// prettier-ignore
const ModVar1: TemplateOnlyComponent<Signature> = <template>

  <h1>   Module variable template. Module variable template. Module variable template. Module variable template. Module variable template. Module variable template. Module variable template. Module variable template.   </h1>
</template>,
ModVar2 : TemplateOnlyComponent<Signature>= <template>
  Second module variable template.
</template>,
    num = 1;

// prettier-ignore
const bool: boolean = false, ModVar3: TemplateOnlyComponent<Signature>  = <template>

  <h1>   Module variable template. Module variable template. Module variable template. Module variable template. Module variable template. Module variable template. Module variable template. Module variable template.   </h1>
</template>,
ModVar4: TemplateOnlyComponent<Signature> = <template>
  Second module variable template.
</template>
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gts/prettier-ignore/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

// prettier-ignore
const ModVar1 = <template>

  <h1>   Module variable template. Module variable template. Module variable template. Module variable template. Module variable template. Module variable template. Module variable template. Module variable template.   </h1>
</template> as TemplateOnlyComponent<Signature>,
ModVar2 = <template>
  Second module variable template.
</template> as TemplateOnlyComponent<Signature>,
    num = 1;

// prettier-ignore
const bool: boolean = false, ModVar3  = <template>

  <h1>   Module variable template. Module variable template. Module variable template. Module variable template. Module variable template. Module variable template. Module variable template. Module variable template.   </h1>
</template> as TemplateOnlyComponent<Signature>,
ModVar4 = <template>
  Second module variable template.
</template> as TemplateOnlyComponent<Signature>
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gts/prettier-ignore/one-line.gts 1`] = `
"import type { TOC } from \\"@ember/component/template-only\\";

export interface Sig {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

// prettier-ignore
const Oneline = <template>      Module variable template (one line). </template> as TOC<Sig>
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gts/prettier-ignore/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

// prettier-ignore
<template>
              what
            </template> as TemplateOnlyComponent<Signature>
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gts/rendering-test.gts 1`] = `
"import { module, test } from \\"qunit\\";
import { render } from \\"@ember/test-helpers\\";
import { setupRenderingTest } from \\"ember-qunit\\";

module(\\"Render with template tag\\", function (hooks) {
  setupRenderingTest(hooks);

  test(\\"it has a template tag\\", async function (assert) {
    await render(<template>what</template>);
    assert.dom().hasText(\\"what\\");
  });
});
"
`;

exports[`config > templateExportDefault: true > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export default <template>
  what
</template> as TemplateOnlyComponent<Signature>;
"
`;
